import { Injectable, Logger } from '@nestjs/common';
import { GeminiService } from './gemini.service';
import { DocumentProcessorService } from './document-processor.service';

// ƒê·ªãnh nghƒ©a interface cho ngu·ªìn tr·∫£ v·ªÅ cho ng∆∞·ªùi d√πng
export interface Source {
  text: string;
  metadata: {
    source: string;
    chunk_index: number;
  };
  score: number;
}

// ƒê·ªãnh nghƒ©a interface cho k·∫øt qu·∫£ tr·∫£ v·ªÅ t·ª´ API
export interface QueryResult {
  answer: string;
  sources: Source[];
}

// ƒê·ªãnh nghƒ©a interface cho k·∫øt qu·∫£ c·ªßa ingest document
export interface IngestResult {
  success: boolean;
  message: string;
}

@Injectable()
export class RAGService {
  private readonly logger = new Logger(RAGService.name);

  constructor(
    private geminiService: GeminiService,
    private documentProcessorService: DocumentProcessorService,
  ) {}

  /**
   * Ingestion: X·ª≠ l√Ω t√†i li·ªáu - t·∫°m th·ªùi ch·ªâ extract text
   */
  async ingestDocument(filePath: string): Promise<IngestResult> {
    try {
      return this.documentProcessorService.processDocument(filePath);
    } catch (error) {
      const errorMessage = this.getErrorMessage(error);
      this.logger.error(`Error ingesting document: ${errorMessage}`);
      return { success: false, message: errorMessage };
    }
  }

  /**
   * Query: T·∫°m th·ªùi s·ª≠ d·ª•ng fallback logic kh√¥ng c√≥ vector search
   */
  async query(question: string): Promise<QueryResult> {
    try {
      this.logger.log(`Processing query: ${question}`);
      
      // T·∫°m th·ªùi s·ª≠ d·ª•ng fallback logic v√¨ kh√¥ng c√≥ vector database
      const answer = await this.getFallbackAnswer(question);
      
      return {
        answer,
        sources: [] // Kh√¥ng c√≥ sources v√¨ kh√¥ng c√≥ vector search
      };
    } catch (error) {
      const errorMessage = this.getErrorMessage(error);
      this.logger.error(`Error querying RAG: ${errorMessage}`);
      
      return {
        answer: 'Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau.',
        sources: []
      };
    }
  }

  /**
   * Fallback logic khi kh√¥ng c√≥ vector search
   */
  private async getFallbackAnswer(question: string): Promise<string> {
    const lowerQuestion = question.toLowerCase();
    
    // S·ª≠ d·ª•ng Gemini ƒë·ªÉ tr·∫£ l·ªùi tr·ª±c ti·∫øp (kh√¥ng c·∫ßn context t·ª´ vector DB)
    const basePrompt = `B·∫°n l√† AI Assistant t∆∞ v·∫•n gi√°o d·ª•c c·ªßa FPT University. 
H√£y tr·∫£ l·ªùi c√¢u h·ªèi sau m·ªôt c√°ch h·ªØu √≠ch v√† ch√≠nh x√°c d·ª±a tr√™n ki·∫øn th·ª©c v·ªÅ FPT University.
N·∫øu kh√¥ng ch·∫Øc ch·∫Øn v·ªÅ th√¥ng tin c·ª• th·ªÉ, h√£y ƒë·ªÅ xu·∫•t li√™n h·ªá tr·ª±c ti·∫øp v·ªõi nh√† tr∆∞·ªùng.

C√¢u h·ªèi: ${question}`;

    try {
      return await this.geminiService.generateResponse(question, basePrompt);
    } catch (error) {
      this.logger.error('Failed to get Gemini response, using static fallback');
      
      // Static fallback n·∫øu Gemini c≈©ng fail
      if (lowerQuestion.includes('h·ªçc ph√≠') || lowerQuestion.includes('chi ph√≠')) {
        return `üìö **Th√¥ng tin h·ªçc ph√≠ FPT University:**

**K·ªπ thu·∫≠t ph·∫ßn m·ªÅm (SE):** 20.500.000 VND/h·ªçc k·ª≥
**Tr√≠ tu·ªá nh√¢n t·∫°o (AI):** 21.500.000 VND/h·ªçc k·ª≥  
**An to√†n th√¥ng tin (IS):** 20.500.000 VND/h·ªçc k·ª≥
**Qu·∫£n tr·ªã kinh doanh (BA):** 19.500.000 VND/h·ªçc k·ª≥

*H·ªçc ph√≠ c√≥ th·ªÉ thay ƒë·ªïi theo t·ª´ng nƒÉm h·ªçc.*

üìû Li√™n h·ªá: (024) 7300 1866 ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt.`;
      }
      
      return `Xin ch√†o! T√¥i l√† AI chatbot c·ªßa FPT University. 
      
ƒê·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ t·ªët nh·∫•t, vui l√≤ng li√™n h·ªá:
üìû Hotline: (024) 7300 1866
üìß Email: daihocfpt@fpt.edu.vn
üåê Website: fpt.edu.vn`;
    }
  }

  private getErrorMessage(error: unknown): string {
    if (typeof error === 'object' && error !== null && 'message' in error) {
      return (error as { message: string }).message;
    }
    return String(error);
  }
}

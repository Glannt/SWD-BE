import express from 'express';
import * as path from 'path';
import { Pinecone } from '@pinecone-database/pinecone';
import { GoogleGenerativeAI } from '@google/generative-ai';
import * as dotenv from 'dotenv';

// Load environment variables
dotenv.config();

const app = express();
const PORT = process.env.PORT ? parseInt(process.env.PORT) : 3000;

// CORS middleware (th·ªß c√¥ng)
app.use((req, res, next) => {
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');
  
  if (req.method === 'OPTIONS') {
    res.sendStatus(200);
  } else {
    next();
  }
});

app.use(express.json());
app.use(express.static(path.join(__dirname, '../public')));

// Configuration
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const PINECONE_API_KEY = process.env.PINECONE_API_KEY;
const PINECONE_INDEX_NAME = process.env.PINECONE_INDEX_NAME || 'fpt-university-768d';

console.log('üîß Configuration:');
console.log('- Port:', PORT);
console.log('- Gemini API Key:', GEMINI_API_KEY ? '‚úÖ Configured' : '‚ùå Missing');
console.log('- Pinecone API Key:', PINECONE_API_KEY ? '‚úÖ Configured' : '‚ùå Missing');
console.log('- Pinecone Index:', PINECONE_INDEX_NAME);

// Initialize services
let genAI: GoogleGenerativeAI;
let pc: Pinecone;
let index: any;

// Initialize AI services
try {
  if (GEMINI_API_KEY) {
    genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
    console.log('‚úÖ Gemini AI initialized');
  } else {
    throw new Error('GEMINI_API_KEY not configured');
  }

  if (PINECONE_API_KEY) {
    pc = new Pinecone({ apiKey: PINECONE_API_KEY });
    index = pc.index(PINECONE_INDEX_NAME);
    console.log('‚úÖ Pinecone initialized');
  } else {
    throw new Error('PINECONE_API_KEY not configured');
  }
} catch (error) {
  console.error('‚ùå Configuration error:', error.message);
  process.exit(1);
}

// Generate embedding function
async function generateEmbedding(text: string): Promise<number[]> {
  try {
    const model = genAI.getGenerativeModel({ model: "text-embedding-004" });
    const result = await model.embedContent(text);
    
    if (result.embedding && result.embedding.values) {
      const embedding = result.embedding.values;
      console.log('üìä Generated embedding with dimension:', embedding.length);
      return embedding;
    }
  } catch (error) {
    console.warn('‚ö†Ô∏è Gemini embedding failed, using fallback:', error.message);
  }
  
  // Fallback to mock embedding
  return generateMockEmbedding(text);
}

// Mock embedding function (768D native)
function generateMockEmbedding(text: string): number[] {
  const dimension = 768; // Native Gemini dimension
  const vector = [];
  
  const hash = text.split('').reduce((a, b) => {
    a = ((a << 5) - a) + b.charCodeAt(0);
    return a & a;
  }, 0);
  
  for (let i = 0; i < dimension; i++) {
    vector.push((Math.sin(hash + i) + 1) / 2);
  }
  
  console.log('üìä Generated mock embedding with dimension:', dimension);
  return vector;
}

// Query Pinecone RAG function
async function queryPineconeRAG(question: string): Promise<string> {
  try {
    console.log('üîç Querying for:', question);
    
    // Generate embedding for question
    const queryVector = await generateEmbedding(question);
    
    // Query Pinecone
    const queryResponse = await index.query({
      vector: queryVector,
      topK: 3,
      includeMetadata: true
    });
    
    console.log('üìä Found', queryResponse.matches?.length || 0, 'matches');
    
    // Extract context from results  
    let context = '';
    if (queryResponse.matches && queryResponse.matches.length > 0) {
      context = queryResponse.matches
        .map(match => {
          if (match.metadata && match.metadata.text) {
            const type = String(match.metadata.type || 'info');
            const score = match.score ? `(${(match.score * 100).toFixed(1)}%)` : '';
            return `[${type.toUpperCase()}] ${score} ${match.metadata.text}`;
          }
          return '';
        })
        .filter(text => text.length > 0)
        .join('\n\n');
    }
    
    // Generate answer if we have context
    if (context.length > 0) {
      return await generateAnswerFromContext(question, context);
    }
    
    return 'Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y th√¥ng tin ph√π h·ª£p ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa b·∫°n. Vui l√≤ng th·ª≠ h·ªèi v·ªÅ h·ªçc ph√≠, ng√†nh h·ªçc, c∆° s·ªü, h·ªçc b·ªïng ho·∫∑c c∆° h·ªôi vi·ªác l√†m t·∫°i FPT University.';
    
  } catch (error) {
    console.error('‚ùå Error querying Pinecone:', error);
    return 'ƒê√£ x·∫£y ra l·ªói khi t√¨m ki·∫øm th√¥ng tin. Vui l√≤ng th·ª≠ l·∫°i sau.';
  }
}

// Generate answer from context using Gemini
async function generateAnswerFromContext(question: string, context: string): Promise<string> {
  try {
    const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash" });
    
    const prompt = `B·∫°n l√† chatbot t∆∞ v·∫•n ngh·ªÅ nghi·ªáp c·ªßa FPT University. H√£y tr·∫£ l·ªùi c√¢u h·ªèi d·ª±a tr√™n th√¥ng tin ƒë∆∞·ª£c cung c·∫•p.

C√ÇUH·ªéI: ${question}

TH√îNG TIN T·ª™ C∆† S·ªû D·ªÆ LI·ªÜU:
${context}

Y√äU C·∫¶U:
- Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát
- S·ª≠ d·ª•ng emoji ph√π h·ª£p
- Format ƒë·∫πp v·ªõi markdown
- Th√¥ng tin ch√≠nh x√°c d·ª±a tr√™n context
- Th√™m th√¥ng tin li√™n h·ªá cu·ªëi c√¢u tr·∫£ l·ªùi
- Gi·ªØ tone th√¢n thi·ªán, chuy√™n nghi·ªáp

LI√äN H·ªÜ:
üìû Hotline: (024) 7300 1866
üìß Email: daihocfpt@fpt.edu.vn`;

    const result = await model.generateContent(prompt);
    const response = await result.response;
    const generatedText = response.text();
    
    if (generatedText && generatedText.trim().length > 0) {
      console.log('‚úÖ Generated answer using Gemini');
      return generatedText;
    }
  } catch (error) {
    console.warn('‚ö†Ô∏è Gemini generation failed, using template:', error.message);
  }
  
  // Fallback to template-based answer
  return generateTemplateAnswer(question, context);
}

// Template-based answer as fallback
function generateTemplateAnswer(question: string, context: string): string {
  const lowerQuestion = question.toLowerCase();
  
  if (lowerQuestion.includes('h·ªçc ph√≠') || lowerQuestion.includes('chi ph√≠')) {
    return `üí∞ **TH√îNG TIN H·ªåC PH√ç FPT UNIVERSITY**

${context}

üìû **Li√™n h·ªá t∆∞ v·∫•n:** (024) 7300 1866
üìß **Email:** daihocfpt@fpt.edu.vn`;
  }
  
  if (lowerQuestion.includes('ng√†nh') || lowerQuestion.includes('ch∆∞∆°ng tr√¨nh')) {
    return `üéì **TH√îNG TIN CH∆Ø∆†NG TR√åNH ƒê√ÄO T·∫†O**

${context}

**üè¢ ƒêI·ªÇM KH√ÅC BI·ªÜT:**
‚Ä¢ Ch∆∞∆°ng tr√¨nh OJT (On-the-Job Training) 1 h·ªçc k·ª≥
‚Ä¢ Th·ª±c t·∫≠p t·∫°i FPT v√† c√°c doanh nghi·ªáp l·ªõn
‚Ä¢ T·ª∑ l·ªá c√≥ vi·ªác l√†m 95% sau 6 th√°ng t·ªët nghi·ªáp

üìû **Li√™n h·ªá:** (024) 7300 1866`;
  }
  
  if (lowerQuestion.includes('campus') || lowerQuestion.includes('c∆° s·ªü')) {
    return `üè´ **TH√îNG TIN C√ÅC C∆† S·ªû FPT UNIVERSITY**

${context}

üìû **Li√™n h·ªá:** (024) 7300 1866`;
  }
  
  return `üìö **TH√îNG TIN FPT UNIVERSITY**

${context}

üìû **Li√™n h·ªá:** (024) 7300 1866 ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt.`;
}

// Routes
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, '../public/index.html'));
});

app.get('/health', (req, res) => {
  res.json({
    status: 'OK',
    timestamp: new Date().toISOString(),
    service: 'FPT University Chatbot',
    version: '1.0.0',
    configuration: {
      gemini: !!GEMINI_API_KEY,
      pinecone: !!PINECONE_API_KEY,
      index: PINECONE_INDEX_NAME
    }
  });
});

app.post('/ask', async (req, res) => {
  try {
    const { question } = req.body;
    
    if (!question || typeof question !== 'string') {
      return res.status(400).json({
        error: 'Vui l√≤ng cung c·∫•p c√¢u h·ªèi h·ª£p l·ªá',
        message: 'Question is required and must be a string'
      });
    }
    
    console.log('üí¨ Received question:', question);
    
    const answer = await queryPineconeRAG(question);
    
    res.json({
      answer,
      timestamp: new Date().toISOString(),
      question: question
    });
    
  } catch (error) {
    console.error('‚ùå Error processing question:', error);
    res.status(500).json({
      error: 'ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω c√¢u h·ªèi',
      message: error.message
    });
  }
});

// Start server
app.listen(PORT, () => {
  console.log('');
  console.log('üöÄ ==================== SERVER STARTED ====================');
  console.log(`üåê Server running at: http://localhost:${PORT}`);
  console.log(`üí¨ Chat interface: http://localhost:${PORT}`);
  console.log(`üîç Health check: http://localhost:${PORT}/health`);
  console.log(`üìö API endpoint: http://localhost:${PORT}/ask`);
  console.log('=========================================================');
  console.log('');
});

// Handle graceful shutdown
process.on('SIGINT', () => {
  console.log('\nüëã Shutting down server...');
  process.exit(0);
}); 
import { Injectable } from '@nestjs/common';
import { GoogleGenerativeAI, GenerativeModel } from '@google/generative-ai';
import { ConfigService } from '../../config/config.service';

@Injectable()
export class GeminiService {
  private genAI: GoogleGenerativeAI;
  private embeddingModel: GenerativeModel;
  private chatModel: GenerativeModel;

  constructor(private configService: ConfigService) {
    // L·∫•y API key t·ª´ ConfigService
    const apiKey = this.configService.getGeminiApiKey();
    
    if (!apiKey) {
      throw new Error('GEMINI_API_KEY is required but not configured');
    }
    
    console.log('‚úÖ Gemini AI initialized with ConfigService');
    
    // Kh·ªüi t·∫°o Google Generative AI
    this.genAI = new GoogleGenerativeAI(apiKey);
    
    // Kh·ªüi t·∫°o model cho embeddings - s·ª≠ d·ª•ng model ·ªïn ƒë·ªãnh
    this.embeddingModel = this.genAI.getGenerativeModel({
      model: 'text-embedding-004',
    });
    
    // Kh·ªüi t·∫°o model cho chat
    this.chatModel = this.genAI.getGenerativeModel({
      model: 'gemini-2.0-flash',
      generationConfig: {
        temperature: 0.2,
        topK: 40,
        topP: 0.95,
        maxOutputTokens: 8192,
      },
    });
  }

  /**
   * T·∫°o embedding cho vƒÉn b·∫£n
   * @param text VƒÉn b·∫£n c·∫ßn t·∫°o embedding
   * @returns Vector embedding
   */
  async createEmbedding(text: string): Promise<number[]> {
    try {
      console.log(`üìù ƒêang t·∫°o embedding cho vƒÉn b·∫£n: ${text.substring(0, 50)}...`);
      
      // G·ªçi API ƒë·ªÉ t·∫°o embedding v·ªõi c√∫ ph√°p ƒë√∫ng
      const result = await this.embeddingModel.embedContent(text);
      
      const embedding = result.embedding.values;
      
      console.log(`‚úÖ ƒê√£ t·∫°o embedding th√†nh c√¥ng v·ªõi ${embedding.length} chi·ªÅu`);
      return embedding;
    } catch (error) {
      console.error('‚ùå L·ªói khi t·∫°o embedding:', error);
      
      // Tr·∫£ v·ªÅ vector gi·∫£ l·∫≠p v·ªõi k√≠ch th∆∞·ªõc 768 (ph√π h·ª£p v·ªõi text-embedding-004)
      console.log('üîÑ Tr·∫£ v·ªÅ vector gi·∫£ l·∫≠p v·ªõi k√≠ch th∆∞·ªõc 768');
      return Array(768).fill(0).map(() => Math.random() - 0.5);
    }
  }

  /**
   * T·∫°o c√¢u tr·∫£ l·ªùi t·ª´ m√¥ h√¨nh ng√¥n ng·ªØ d·ª±a tr√™n ng·ªØ c·∫£nh v√† c√¢u h·ªèi
   * @param context Ng·ªØ c·∫£nh (th√¥ng tin li√™n quan)
   * @param question C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng
   * @returns C√¢u tr·∫£ l·ªùi t·ª´ m√¥ h√¨nh
   */
  async generateAnswer(context: string, question: string): Promise<string> {
    try {
      console.log(`ü§ñ ƒêang t·∫°o c√¢u tr·∫£ l·ªùi cho c√¢u h·ªèi: ${question}`);
      console.log(`üìö V·ªõi ng·ªØ c·∫£nh: ${context.substring(0, 100)}...`);
      
      // T·∫°o prompt cho m√¥ h√¨nh
      const prompt = `
        B·∫°n l√† FPT AI Assistant - tr·ª£ l√Ω t∆∞ v·∫•n th√¥ng minh c·ªßa ƒê·∫°i h·ªçc FPT University.
        
        H∆Ø·ªöNG D·∫™N TR·∫¢ L·ªúI:
        ‚Ä¢ S·ª≠ d·ª•ng CH√çNH X√ÅC th√¥ng tin t·ª´ c∆° s·ªü d·ªØ li·ªáu ƒë∆∞·ª£c cung c·∫•p
        ‚Ä¢ Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, chuy√™n nghi·ªáp v√† th√¢n thi·ªán
        ‚Ä¢ C·∫•u tr√∫c c√¢u tr·∫£ l·ªùi r√µ r√†ng v·ªõi emoji ph√π h·ª£p
        ‚Ä¢ N·∫øu kh√¥ng c√≥ th√¥ng tin c·ª• th·ªÉ, h√£y th√†nh th·∫≠t n√≥i v√† g·ª£i √Ω li√™n h·ªá
        ‚Ä¢ ∆Øu ti√™n th√¥ng tin ch√≠nh th·ª©c t·ª´ FPT University
        
        TH√îNG TIN T·ª™ C∆† S·ªû D·ªÆ LI·ªÜU FPT:
        ${context}
        
        C√ÇU H·ªéI C·ª¶A NG∆Ø·ªúI D√ôNG: ${question}
        
        H√£y tr·∫£ l·ªùi d·ª±a tr√™n th√¥ng tin tr√™n m·ªôt c√°ch chi ti·∫øt v√† h·ªØu √≠ch nh·∫•t c√≥ th·ªÉ.
      `;
      
      // G·ªçi API ƒë·ªÉ t·∫°o c√¢u tr·∫£ l·ªùi
      const result = await this.chatModel.generateContent(prompt);
      const response = result.response;
      const answer = response.text();
      
      console.log(`‚úÖ ƒê√£ t·∫°o c√¢u tr·∫£ l·ªùi th√†nh c√¥ng: ${answer.substring(0, 100)}...`);
      return answer;
    } catch (error) {
      console.error('‚ùå L·ªói khi t·∫°o c√¢u tr·∫£ l·ªùi:', error);
      return 'Xin l·ªói, hi·ªán t·∫°i t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa b·∫°n do g·∫∑p s·ª± c·ªë k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá (024) 7300 1866 ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ tr·ª±c ti·∫øp.';
    }
  }
} 
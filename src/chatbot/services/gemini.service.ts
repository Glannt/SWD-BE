import { Injectable } from '@nestjs/common';
import { GoogleGenerativeAI } from '@google/generative-ai';
import * as dotenv from 'dotenv';

// Load environment variables
dotenv.config();

@Injectable()
export class GeminiService {
  private genAI: GoogleGenerativeAI;

  constructor() {
    const apiKey = process.env.GEMINI_API_KEY;
    if (!apiKey) {
      throw new Error('GEMINI_API_KEY is required');
    }
    this.genAI = new GoogleGenerativeAI(apiKey);
  }

  /**
   * T·∫°o embedding t·ª´ text s·ª≠ d·ª•ng Gemini text-embedding-004
   * @param text VƒÉn b·∫£n c·∫ßn t·∫°o embedding
   * @returns Vector embedding 768 chi·ªÅu
   */
  async createEmbedding(text: string): Promise<number[]> {
    try {
      console.log('ƒêang t·∫°o embedding cho vƒÉn b·∫£n:', text.substring(0, 100) + '...');
      
      const model = this.genAI.getGenerativeModel({ model: 'text-embedding-004' });
      const result = await model.embedContent(text);
      
      if (result.embedding && result.embedding.values) {
        const embedding = result.embedding.values;
        console.log('ƒê√£ t·∫°o embedding th√†nh c√¥ng v·ªõi', embedding.length, 'chi·ªÅu');
        return embedding;
      }
      
      throw new Error('Kh√¥ng th·ªÉ t·∫°o embedding t·ª´ Gemini API');
    } catch (error) {
      console.error('L·ªói khi t·∫°o embedding:', error);
      throw new Error(`L·ªói Gemini embedding: ${error.message}`);
    }
  }

  /**
   * T·∫°o c√¢u tr·∫£ l·ªùi t·ª´ context s·ª≠ d·ª•ng Gemini generative model
   * @param question C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng
   * @param context Context t·ª´ vector search
   * @returns C√¢u tr·∫£ l·ªùi ƒë∆∞·ª£c t·∫°o
   */
  async generateAnswer(question: string, context: string): Promise<string> {
    try {
      const model = this.genAI.getGenerativeModel({ model: 'gemini-2.0-flash' });
      
      const prompt = `B·∫°n l√† chatbot t∆∞ v·∫•n ngh·ªÅ nghi·ªáp c·ªßa FPT University. H√£y tr·∫£ l·ªùi c√¢u h·ªèi d·ª±a tr√™n th√¥ng tin ƒë∆∞·ª£c cung c·∫•p.

C√ÇUH·ªéI: ${question}

TH√îNG TIN T·ª™ C∆† S·ªû D·ªÆ LI·ªÜU:
${context}

Y√äU C·∫¶U:
- Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát
- S·ª≠ d·ª•ng emoji ph√π h·ª£p
- Format ƒë·∫πp v·ªõi markdown
- Th√¥ng tin ch√≠nh x√°c d·ª±a tr√™n context
- Th√™m th√¥ng tin li√™n h·ªá cu·ªëi c√¢u tr·∫£ l·ªùi
- Gi·ªØ tone th√¢n thi·ªán, chuy√™n nghi·ªáp

LI√äN H·ªÜ:
üìû Hotline: (024) 7300 1866
üìß Email: daihocfpt@fpt.edu.vn`;

      const result = await model.generateContent(prompt);
      const response = await result.response;
      const text = response.text();
      
      if (text && text.trim().length > 0) {
        console.log('‚úÖ Generated answer using Gemini');
        return text;
      }
      
      throw new Error('Gemini kh√¥ng tr·∫£ v·ªÅ c√¢u tr·∫£ l·ªùi h·ª£p l·ªá');
    } catch (error) {
      console.error('L·ªói khi t·∫°o c√¢u tr·∫£ l·ªùi:', error);
      throw new Error(`L·ªói Gemini generation: ${error.message}`);
    }
  }
} 
import { Injectable, Logger, OnModuleInit } from '@nestjs/common';
import { Pinecone } from '@pinecone-database/pinecone';
import { ChatsessionService } from '@/chatsession/chatsession.service';
import { HubspotService } from '../hubspot/hubspot.service';
import { GeminiService } from '../gemini/gemini.service';
import { ConfigService } from '@/config/config.service';

@Injectable()
export class PineconeAssistantService implements OnModuleInit {
  private readonly logger = new Logger(PineconeAssistantService.name);
  private pinecone: Pinecone;
  private assistantName = 'fpt-university-advisor';

  // State machine for collecting user info for HubSpot
  private userState = new Map<
    string,
    { step: 'email' | 'firstname' | 'lastname' | 'done'; data: any }
  >();

  constructor(
    private configService: ConfigService,
    private readonly chatSessionService: ChatsessionService,
    private readonly hubspotService: HubspotService,
    private readonly geminiService: GeminiService,
  ) {
    this.pinecone = new Pinecone({
      apiKey: this.configService.getPineconeApiKey(),
    });
  }

  async onModuleInit() {
    try {
      await this.initializeAssistant();
    } catch (error) {
      this.logger.error('Failed to initialize Pinecone Assistant:', error);
    }
  }

  /**
   * Initialize or get existing assistant
   */
  private async initializeAssistant() {
    try {
      // Check if assistant already exists
      const assistants = await this.pinecone.listAssistants();
      const existingAssistant = assistants.assistants?.find(
        (a) => a.name === this.assistantName,
      );

      if (!existingAssistant) {
        this.logger.log('Creating new Pinecone Assistant...');
        await this.pinecone.createAssistant({
          name: this.assistantName,
          instructions: `B·∫°n l√† FPT AI Assistant - tr·ª£ l√Ω t∆∞ v·∫•n h∆∞·ªõng nghi·ªáp th√¥ng minh c·ªßa ƒê·∫°i h·ªçc FPT.

          Nhi·ªám v·ª• c·ªßa b·∫°n:
          - H·ªó tr·ª£ h·ªçc sinh c·∫•p 3 trong vi·ªác hi·ªÉu r√µ v·ªÅ c√°c ng√†nh ƒë√†o t·∫°o t·∫°i FPT University
          - T∆∞ v·∫•n ch·ªçn ng√†nh h·ªçc ph√π h·ª£p v·ªõi s·ªü th√≠ch v√† nƒÉng l·ª±c
          - Cung c·∫•p th√¥ng tin v·ªÅ h·ªçc ph√≠, ƒëi·ªÅu ki·ªán tuy·ªÉn sinh, c∆° h·ªôi ngh·ªÅ nghi·ªáp
          - Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, vƒÉn phong th√¢n thi·ªán v√† r√µ r√†ng

          Lu√¥n d·ª±a v√†o th√¥ng tin ƒë∆∞·ª£c cung c·∫•p trong t√†i li·ªáu. N·∫øu kh√¥ng c√≥ th√¥ng tin, h√£y tr·∫£ l·ªùi trung th·ª±c r·∫±ng b·∫°n kh√¥ng bi·∫øt v√† g·ª£i √Ω li√™n h·ªá tr·ª±c ti·∫øp v·ªõi nh√† tr∆∞·ªùng.`,
          region: 'us',
        });
        this.logger.log('‚úÖ Pinecone Assistant created successfully');
      } else {
        this.logger.log('‚úÖ Using existing Pinecone Assistant');
      }
    } catch (error) {
      this.logger.error('‚ùå Failed to initialize assistant:', error);
      throw error;
    }
  }

  /**
   * Upload document to assistant
   */
  async uploadDocument(filePath: string, metadata?: Record<string, any>) {
    try {
      this.logger.log(`üì§ Uploading document: ${filePath}`);

      const assistant = this.pinecone.Assistant(this.assistantName);
      const response = await assistant.uploadFile({
        path: filePath,
        metadata,
      });

      this.logger.log(`‚úÖ Document uploaded successfully: ${response.id}`);
      return response;
    } catch (error) {
      this.logger.error('‚ùå Failed to upload document:', error);
      throw error;
    }
  }

  /**
   * Chat with assistant with session management
   */
  async chat(
    question: string,
    sessionId?: string,
    userId?: string,
    anonymousId?: string,
  ) {
    try {
      this.logger.log(`ü§ñ Processing question: ${question}`);
      const effectiveSessionId = sessionId || anonymousId;

      // HubSpot agent logic
      if (effectiveSessionId && this.userState.has(effectiveSessionId)) {
        return this.handleHubspotDataCollection(question, effectiveSessionId);
      }

      // Check if user wants to save info
      const isInterested = await this.shouldOfferHubspot(question);
      if (isInterested && effectiveSessionId) {
        this.userState.set(effectiveSessionId, { step: 'email', data: {} });
        return {
          answer:
            'Tuy·ªát v·ªùi! T√¥i c√≥ th·ªÉ gi√∫p b·∫°n l∆∞u th√¥ng tin ƒë·ªÉ b·ªô ph·∫≠n tuy·ªÉn sinh li√™n h·ªá. Vui l√≤ng cung c·∫•p email c·ªßa b·∫°n tr∆∞·ªõc nh√©.',
          sessionId: effectiveSessionId,
        };
      }

      // Default chat flow
      this.logger.log(
        `üìù Session ID: ${sessionId || 'new-session'}, User ID: ${userId || 'anonymous'}`,
      );

      const assistant = this.pinecone.Assistant(this.assistantName);
      const chatResponse = await assistant.chat({
        messages: [{ role: 'user', content: question }],
        model: 'gpt-4o',
      });

      this.logger.log('‚úÖ Answer generated successfully');
      const answer =
        chatResponse.message?.content ||
        'Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y.';

      const result = await this.chatSessionService.handleChat(
        question,
        answer,
        sessionId,
        userId,
        anonymousId,
      );

      this.logger.log(`üíæ Messages saved to session: ${result.sessionId}`);

      return {
        answer: answer,
        sessionId: result.sessionId,
        messageId: result.messageId,
        citations: chatResponse.citations || [],
        usage: chatResponse.usage,
      };
    } catch (error) {
      this.logger.error('‚ùå Failed to chat with assistant:', error);
      throw error;
    }
  }

  private async shouldOfferHubspot(userInput: string): Promise<boolean> {
    const prompt = `
      User input: "${userInput}"
      Based on the user input, do they seem interested in getting t∆∞ v·∫•n (consultation),
      ƒëƒÉng k√Ω (registering), or receiving more information that would require personal contact?
      Answer only "yes" or "no".
    `;
    const response = await this.geminiService.generateText(prompt);
    return response.toLowerCase().includes('yes');
  }

  private async handleHubspotDataCollection(
    userInput: string,
    sessionId: string,
  ) {
    const state = this.userState.get(sessionId);

    switch (state.step) {
      case 'email':
        state.data.email = userInput;
        state.step = 'firstname';
        this.userState.set(sessionId, state);
        return {
          answer: 'C·∫£m ∆°n b·∫°n. Ti·∫øp theo, vui l√≤ng cho t√¥i bi·∫øt t√™n c·ªßa b·∫°n.',
          sessionId,
        };

      case 'firstname':
        state.data.firstname = userInput;
        state.step = 'lastname';
        this.userState.set(sessionId, state);
        return {
          answer: 'R·∫•t t·ªët. Cu·ªëi c√πng, xin cho bi·∫øt h·ªç c·ªßa b·∫°n.',
          sessionId,
        };

      case 'lastname':
        state.data.lastname = userInput;
        this.userState.delete(sessionId); // Clean up state

        try {
          this.logger.log('Creating HubSpot contact with data:', state.data);
          await this.hubspotService.createContact(
            state.data.email,
            state.data.firstname,
            state.data.lastname,
          );
          return {
            answer:
              'C·∫£m ∆°n b·∫°n! Th√¥ng tin ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng. B·ªô ph·∫≠n tuy·ªÉn sinh s·∫Ω s·ªõm li√™n h·ªá v·ªõi b·∫°n.',
            sessionId,
          };
        } catch (error) {
          if (error.code === 409) {
            return {
              answer:
                'Th√¥ng tin c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n tr∆∞·ªõc ƒë√≥. C·∫£m ∆°n b·∫°n ƒë√£ quan t√¢m!',
              sessionId,
            };
          }
          this.logger.error('Failed to create HubSpot contact:', error);
          return {
            answer:
              'ƒê√£ c√≥ l·ªói x·∫£y ra khi l∆∞u th√¥ng tin c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau.',
            sessionId,
          };
        }
    }
  }

  /**
   * List uploaded files
   */
  async listFiles() {
    try {
      const assistant = this.pinecone.Assistant(this.assistantName);
      const files = await assistant.listFiles();
      return files;
    } catch (error) {
      this.logger.error('‚ùå Failed to list files:', error);
      throw error;
    }
  }

  /**
   * Delete a file
   */
  async deleteFile(fileId: string) {
    try {
      const assistant = this.pinecone.Assistant(this.assistantName);
      await assistant.deleteFile(fileId);
      this.logger.log(`‚úÖ File deleted: ${fileId}`);
    } catch (error) {
      this.logger.error('‚ùå Failed to delete file:', error);
      throw error;
    }
  }

  /**
   * Get assistant status and health
   */
  async getAssistantStatus() {
    try {
      const assistants = await this.pinecone.listAssistants();
      const assistant = assistants.assistants?.find(
        (a) => a.name === this.assistantName,
      );

      if (!assistant) {
        return { status: 'not_found', healthy: false };
      }

      const assistantInstance = this.pinecone.Assistant(this.assistantName);
      const files = await assistantInstance.listFiles();

      return {
        status: assistant.status || 'unknown',
        healthy: true,
        fileCount: files.files?.length || 0,
        createdAt: (assistant as any).createdOn || assistant.createdAt,
        updatedAt: (assistant as any).updatedOn || assistant.updatedAt,
      };
    } catch (error) {
      this.logger.error('‚ùå Failed to get assistant status:', error);
      return { status: 'error', healthy: false, error: error.message };
    }
  }

  /**
   * Auto-upload FPT University documents if not already uploaded
   * @returns Promise<boolean> - true if documents are available (uploaded or already existed)
   */
  async autoUploadFPTDocuments(): Promise<boolean> {
    try {
      // Check if documents already exist
      const status = await this.getAssistantStatus();

      if (status.fileCount > 0) {
        this.logger.log('üìÑ Documents already exist in Pinecone Assistant');
        return true;
      }

      this.logger.log('üì§ Auto-uploading FPT University documents...');

      // Import upload function dynamically to avoid circular dependency
      const { uploadFPTDocuments } = await import('./cli/upload-fpt-docs');

      // Execute upload with service instance (this will handle its own logging)
      await uploadFPTDocuments(this);

      this.logger.log('‚úÖ Auto-upload completed successfully');
      return true;
    } catch (error) {
      this.logger.error('‚ùå Auto-upload failed:', error.message);
      this.logger.warn('‚ö†Ô∏è Application will continue without documents');
      return false;
    }
  }
}

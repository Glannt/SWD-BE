import { Injectable, Logger, OnModuleInit } from '@nestjs/common';
import { Pinecone } from '@pinecone-database/pinecone';
import { ConfigService } from '@nestjs/config';

@Injectable()
export class PineconeAssistantService implements OnModuleInit {
  private readonly logger = new Logger(PineconeAssistantService.name);
  private pinecone: Pinecone;
  private assistantName = 'fpt-university-advisor';

  constructor(private configService: ConfigService) {
    this.pinecone = new Pinecone({
      apiKey: this.configService.get<string>('PINECONE_API_KEY'),
    });
  }

  async onModuleInit() {
    try {
      await this.initializeAssistant();
    } catch (error) {
      this.logger.error('Failed to initialize Pinecone Assistant:', error);
    }
  }

  /**
   * Initialize or get existing assistant
   */
  private async initializeAssistant() {
    try {
      // Check if assistant already exists
      const assistants = await this.pinecone.listAssistants();
      const existingAssistant = assistants.assistants?.find(
        (a) => a.name === this.assistantName
      );

      if (!existingAssistant) {
        this.logger.log('Creating new Pinecone Assistant...');
        await this.pinecone.createAssistant({
          name: this.assistantName,
          instructions: `B·∫°n l√† FPT AI Assistant - tr·ª£ l√Ω t∆∞ v·∫•n h∆∞·ªõng nghi·ªáp th√¥ng minh c·ªßa ƒê·∫°i h·ªçc FPT.

          Nhi·ªám v·ª• c·ªßa b·∫°n:
          - H·ªó tr·ª£ h·ªçc sinh c·∫•p 3 trong vi·ªác hi·ªÉu r√µ v·ªÅ c√°c ng√†nh ƒë√†o t·∫°o t·∫°i FPT University
          - T∆∞ v·∫•n ch·ªçn ng√†nh h·ªçc ph√π h·ª£p v·ªõi s·ªü th√≠ch v√† nƒÉng l·ª±c
          - Cung c·∫•p th√¥ng tin v·ªÅ h·ªçc ph√≠, ƒëi·ªÅu ki·ªán tuy·ªÉn sinh, c∆° h·ªôi ngh·ªÅ nghi·ªáp
          - Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, vƒÉn phong th√¢n thi·ªán v√† r√µ r√†ng

          Lu√¥n d·ª±a v√†o th√¥ng tin ƒë∆∞·ª£c cung c·∫•p trong t√†i li·ªáu. N·∫øu kh√¥ng c√≥ th√¥ng tin, h√£y tr·∫£ l·ªùi trung th·ª±c r·∫±ng b·∫°n kh√¥ng bi·∫øt v√† g·ª£i √Ω li√™n h·ªá tr·ª±c ti·∫øp v·ªõi nh√† tr∆∞·ªùng.`,
          region: 'us',
        });
        this.logger.log('‚úÖ Pinecone Assistant created successfully');
      } else {
        this.logger.log('‚úÖ Using existing Pinecone Assistant');
      }
    } catch (error) {
      this.logger.error('‚ùå Failed to initialize assistant:', error);
      throw error;
    }
  }

  /**
   * Upload document to assistant
   */
  async uploadDocument(filePath: string, metadata?: Record<string, any>) {
    try {
      this.logger.log(`üì§ Uploading document: ${filePath}`);

      const assistant = this.pinecone.Assistant(this.assistantName);
      const response = await assistant.uploadFile({
        path: filePath,
        metadata,
      });

      this.logger.log(`‚úÖ Document uploaded successfully: ${response.id}`);
      return response;
    } catch (error) {
      this.logger.error('‚ùå Failed to upload document:', error);
      throw error;
    }
  }

  /**
   * Chat with assistant
   */
  async chat(question: string, sessionId?: string) {
    try {
      this.logger.log(`ü§ñ Processing question: ${question}`);

      const assistant = this.pinecone.Assistant(this.assistantName);
      const chatResponse = await assistant.chat({
        messages: [{ role: 'user', content: question }],
        model: 'gpt-4o',
      });

      this.logger.log('‚úÖ Answer generated successfully');
      return {
        answer: chatResponse.message?.content || 'Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y.',
        citations: chatResponse.citations || [],
        usage: chatResponse.usage,
      };
    } catch (error) {
      this.logger.error('‚ùå Failed to chat with assistant:', error);
      throw error;
    }
  }

  /**
   * List uploaded files
   */
  async listFiles() {
    try {
      const assistant = this.pinecone.Assistant(this.assistantName);
      const files = await assistant.listFiles();
      return files;
    } catch (error) {
      this.logger.error('‚ùå Failed to list files:', error);
      throw error;
    }
  }

  /**
   * Delete a file
   */
  async deleteFile(fileId: string) {
    try {
      const assistant = this.pinecone.Assistant(this.assistantName);
      await assistant.deleteFile(fileId);
      this.logger.log(`‚úÖ File deleted: ${fileId}`);
    } catch (error) {
      this.logger.error('‚ùå Failed to delete file:', error);
      throw error;
    }
  }

  /**
   * Get assistant status and health
   */
  async getAssistantStatus() {
    try {
      const assistants = await this.pinecone.listAssistants();
      const assistant = assistants.assistants?.find(
        (a) => a.name === this.assistantName
      );

      if (!assistant) {
        return { status: 'not_found', healthy: false };
      }

      const assistantInstance = this.pinecone.Assistant(this.assistantName);
      const files = await assistantInstance.listFiles();

      return {
        status: assistant.status || 'unknown',
        healthy: true,
        fileCount: files.files?.length || 0,
        createdAt: (assistant as any).createdOn || assistant.createdAt,
        updatedAt: (assistant as any).updatedOn || assistant.updatedAt,
      };
    } catch (error) {
      this.logger.error('‚ùå Failed to get assistant status:', error);
      return { status: 'error', healthy: false, error: error.message };
    }
  }

  /**
   * Auto-upload FPT University documents if not already uploaded
   * @returns Promise<boolean> - true if documents are available (uploaded or already existed)
   */
  async autoUploadFPTDocuments(): Promise<boolean> {
    try {
      // Check if documents already exist
      const status = await this.getAssistantStatus();

      if (status.fileCount > 0) {
        this.logger.log('üìÑ Documents already exist in Pinecone Assistant');
        return true;
      }

      this.logger.log('üì§ Auto-uploading FPT University documents...');

      // Import upload function dynamically to avoid circular dependency
      const { uploadFPTDocuments } = await import('./cli/upload-fpt-docs');

      // Execute upload with service instance (this will handle its own logging)
      await uploadFPTDocuments(this);

      this.logger.log('‚úÖ Auto-upload completed successfully');
      return true;

    } catch (error) {
      this.logger.error('‚ùå Auto-upload failed:', error.message);
      this.logger.warn('‚ö†Ô∏è Application will continue without documents');
      return false;
    }
  }
}
import * as dotenv from 'dotenv';
import { GoogleGenerativeAI } from '@google/generative-ai';
import { Pinecone } from '@pinecone-database/pinecone';

// Load environment variables
dotenv.config();

async function testConfiguration() {
  console.log('üîß ==================== TEST CONFIGURATION ====================');
  console.log('');

  // Test 1: Environment Variables
  console.log('1Ô∏è‚É£ **KI·ªÇM TRA BI·∫æN M√îI TR∆Ø·ªúNG:**');
  console.log('PORT:', process.env.PORT || 'Ch∆∞a c·∫•u h√¨nh');
  console.log('GLOBAL_PREFIX:', process.env.GLOBAL_PREFIX || 'Ch∆∞a c·∫•u h√¨nh');
  console.log('GEMINI_API_KEY:', process.env.GEMINI_API_KEY ? '‚úÖ ƒê√£ c·∫•u h√¨nh' : '‚ùå Ch∆∞a c·∫•u h√¨nh');
  console.log('PINECONE_API_KEY:', process.env.PINECONE_API_KEY ? '‚úÖ ƒê√£ c·∫•u h√¨nh' : '‚ùå Ch∆∞a c·∫•u h√¨nh');
  console.log('PINECONE_INDEX_NAME:', process.env.PINECONE_INDEX_NAME || 'Ch∆∞a c·∫•u h√¨nh');
  console.log('');

  // Test 2: Gemini AI Connection
  console.log('2Ô∏è‚É£ **KI·ªÇM TRA GEMINI AI:**');
  try {
    const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY!);
    const model = genAI.getGenerativeModel({ model: "text-embedding-004" });
    
    console.log('üìù ƒêang test embedding...');
    const result = await model.embedContent('Test connection to Gemini AI');
    
    if (result.embedding && result.embedding.values) {
      console.log('‚úÖ Gemini AI ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng');
      console.log('üìä Embedding dimension:', result.embedding.values.length);
    } else {
      console.log('‚ùå Gemini AI tr·∫£ v·ªÅ k·∫øt qu·∫£ kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng');
    }
  } catch (error) {
    console.log('‚ùå L·ªói k·∫øt n·ªëi Gemini AI:', error.message);
  }
  console.log('');

  // Test 3: Pinecone Connection
  console.log('3Ô∏è‚É£ **KI·ªÇM TRA PINECONE:**');
  try {
    const pc = new Pinecone({ apiKey: process.env.PINECONE_API_KEY! });
    
    console.log('üìù ƒêang ki·ªÉm tra danh s√°ch indexes...');
    const indexes = await pc.listIndexes();
    console.log('‚úÖ K·∫øt n·ªëi Pinecone th√†nh c√¥ng');
    console.log('üìä S·ªë l∆∞·ª£ng indexes:', indexes.indexes?.length || 0);
    
    if (indexes.indexes && indexes.indexes.length > 0) {
      console.log('üìã Danh s√°ch indexes:');
      indexes.indexes.forEach((index, i) => {
        console.log(`   ${i + 1}. ${index.name} (dimension: ${index.dimension})`);
      });
    }

    // Ki·ªÉm tra index c·ª• th·ªÉ
    const targetIndex = process.env.PINECONE_INDEX_NAME;
    const indexExists = indexes.indexes?.some(index => index.name === targetIndex);
    
    if (indexExists) {
      console.log(`‚úÖ Index "${targetIndex}" t·ªìn t·∫°i`);
      
      // Test query
      console.log('üìù ƒêang test query...');
      const index = pc.index(targetIndex);
      const queryResult = await index.query({
        vector: Array(768).fill(0.1), // Test vector
        topK: 1,
        includeMetadata: true
      });
      
      console.log('‚úÖ Query th√†nh c√¥ng');
      console.log('üìä S·ªë k·∫øt qu·∫£:', queryResult.matches?.length || 0);
    } else {
      console.log(`‚ùå Index "${targetIndex}" kh√¥ng t·ªìn t·∫°i`);
    }
    
  } catch (error) {
    console.log('‚ùå L·ªói k·∫øt n·ªëi Pinecone:', error.message);
  }
  console.log('');

  // Test 4: Full RAG Pipeline
  console.log('4Ô∏è‚É£ **KI·ªÇM TRA PIPELINE RAG:**');
  try {
    // Create embedding
    const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY!);
    const embeddingModel = genAI.getGenerativeModel({ model: "text-embedding-004" });
    
    const testQuestion = "H·ªçc ph√≠ FPT University l√† bao nhi√™u?";
    console.log(`üìù Test c√¢u h·ªèi: "${testQuestion}"`);
    
    const embeddingResult = await embeddingModel.embedContent(testQuestion);
    const queryVector = embeddingResult.embedding.values;
    
    // Query Pinecone
    const pc = new Pinecone({ apiKey: process.env.PINECONE_API_KEY! });
    const index = pc.index(process.env.PINECONE_INDEX_NAME!);
    
    const queryResult = await index.query({
      vector: queryVector,
      topK: 3,
      includeMetadata: true
    });
    
    console.log('‚úÖ RAG Pipeline ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng');
    console.log('üìä T√¨m th·∫•y', queryResult.matches?.length || 0, 'k·∫øt qu·∫£ li√™n quan');
    
    if (queryResult.matches && queryResult.matches.length > 0) {
      console.log('üìã Top results:');
      queryResult.matches.slice(0, 2).forEach((match, i) => {
        const score = match.score ? (match.score * 100).toFixed(1) : 'N/A';
        const text = match.metadata?.text ? String(match.metadata.text).substring(0, 100) : 'No text';
        console.log(`   ${i + 1}. (${score}%) ${text}...`);
      });
    }

  } catch (error) {
    console.log('‚ùå L·ªói RAG Pipeline:', error.message);
  }
  console.log('');

  console.log('üéØ **T·ªîNG K·∫æT:**');
  console.log('N·∫øu t·∫•t c·∫£ ƒë·ªÅu ‚úÖ, b·∫°n c√≥ th·ªÉ ch·∫°y server b·∫±ng:');
  console.log('   pnpm run start:dev   (NestJS mode)');
  console.log('ho·∫∑c');
  console.log('   pnpm run simple      (Simple server mode)');
  console.log('');
  console.log('Sau ƒë√≥ truy c·∫≠p: http://localhost:3000');
}

// Run the test
testConfiguration().catch(console.error); 